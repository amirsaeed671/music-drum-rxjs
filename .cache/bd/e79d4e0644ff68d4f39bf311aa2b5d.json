{"id":"node_modules/rxjs/_esm5/internal/scheduler/queue.js","dependencies":[{"name":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/_esm5/internal/scheduler/queue.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/src/internal/scheduler/queue.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/package.json","includedInParent":true,"mtime":1590585452279},{"name":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/package.json","includedInParent":true,"mtime":1590585452092},{"name":"./QueueAction","loc":{"line":2,"column":28},"parent":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/_esm5/internal/scheduler/queue.js","resolved":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js"},{"name":"./QueueScheduler","loc":{"line":3,"column":31},"parent":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/_esm5/internal/scheduler/queue.js","resolved":"/Users/amirsaeed671/Documents/learning/music-drum-rxjs/node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queue = void 0;\n\nvar _QueueAction = require(\"./QueueAction\");\n\nvar _QueueScheduler = require(\"./QueueScheduler\");\n\n/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\nvar queue = /*@__PURE__*/new _QueueScheduler.QueueScheduler(_QueueAction.QueueAction);\nexports.queue = queue;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":71,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/scheduler/queue.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}}],"sources":{"../../../src/internal/scheduler/queue.ts":"import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n"},"lineCount":null}},"error":null,"hash":"55b956aca35606e078a585ce0de14e91","cacheData":{"env":{}}}